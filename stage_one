import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from docx2pdf import convert
from PIL import Image
import configparser

# Create a ConfigParser object
config = configparser.ConfigParser()

# Read the config.ini file
config.read('config.ini')

# Access configuration settings
input_format = config.get('Converter', 'input_format')
output_format = config.get('Converter', 'output_format')
input_directory = config.get('Paths', 'input_directory')
output_directory = config.get('Paths', 'output_directory')

# Use the configuration settings in your script

class FileConverterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("File Converter")

        # Dark theme colors
        root.configure(bg="#121212")
        self.label_color = "#FFFFFF"
        self.button_bg = "#272727"
        self.button_fg = "#FFFFFF"
        self.result_color = "#00FF00"

        # Set styles for themed widgets
        style = ttk.Style()
        style.theme_use("clam")  # Choose a theme (e.g., "clam", "alt", "default")

        # Dark-themed label
        self.input_label = tk.Label(root, text="Select input file:", fg=self.label_color, bg="#121212")
        self.input_label.pack()

        # Dark-themed entry widget
        self.input_entry = tk.Entry(root, width=50, bg=self.button_bg, fg=self.button_fg)
        self.input_entry.pack()

        # Dark-themed browse button
        self.input_button = tk.Button(root, text="Browse", command=self.browse_input, bg=self.button_bg, fg=self.button_fg)
        self.input_button.pack()

        # Dark-themed label
        self.output_label = tk.Label(root, text="Select output file:", fg=self.label_color, bg="#121212")
        self.output_label.pack()

        # Dark-themed entry widget
        self.output_entry = tk.Entry(root, width=50, bg=self.button_bg, fg=self.button_fg)
        self.output_entry.pack()

        # Dark-themed browse button
        self.output_button = tk.Button(root, text="Browse", command=self.browse_output, bg=self.button_bg, fg=self.button_fg)
        self.output_button.pack()

        # Dropdown menu for input file format
        self.input_format_label = tk.Label(root, text="Select input format:", fg=self.label_color, bg="#121212")
        self.input_format_label.pack()

        self.input_format_var = tk.StringVar()
        self.input_format_var.set("PNG")  # Set default input format
        self.input_format_menu = ttk.Combobox(root, textvariable=self.input_format_var, values=["PNG", "JPG", "DOCX"], style="TCombobox")
        self.input_format_menu.pack()

        # Dropdown menu for output file format
        self.output_format_label = tk.Label(root, text="Select output format:", fg=self.label_color, bg="#121212")
        self.output_format_label.pack()

        self.output_format_var = tk.StringVar()
        self.output_format_var.set("PDF")  # Set default output format
        self.output_format_menu = ttk.Combobox(root, textvariable=self.output_format_var, values=["PDF", "JPG"], style="TCombobox")
        self.output_format_menu.pack()

        # Dark-themed convert button
        self.convert_button = tk.Button(root, text="Convert", command=self.convert_file, bg=self.button_bg, fg=self.button_fg)
        self.convert_button.pack()

    def browse_input(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg"), ("DOCX files", "*.docx")])
        self.input_entry.delete(0, tk.END)
        self.input_entry.insert(0, file_path)

    def browse_output(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf"), ("JPG files", "*.jpg")])
        self.output_entry.delete(0, tk.END)
        self.output_entry.insert(0, file_path)

    def convert_file(self):
        input_file_path = self.input_entry.get()
        output_file_path = self.output_entry.get()

        input_format = self.input_format_var.get().lower()
        output_format = self.output_format_var.get().lower()

        try:
            if input_format == "png" and output_format == "jpg":
                image = Image.open(input_file_path)
                image.save(output_file_path, "JPEG")
                result_label.config(text="Conversion successful.", fg=self.result_color)
            elif input_format == "jpg" and output_format == "png":
                image = Image.open(input_file_path)
                image.save(output_file_path, "PNG")
                result_label.config(text="Conversion successful.", fg=self.result_color)
            elif input_format == "docx" and output_format == "pdf":
                convert(input_file_path, output_file_path)
                result_label.config(text="Conversion successful.", fg=self.result_color)
            else:
                result_label.config(text="Unsupported conversion.", fg="red")
        except Exception as e:
            result_label.config(text=f"Error: {str(e)}", fg="red")

if __name__ == "__main__":
    root = tk.Tk()
    app = FileConverterApp(root)
    result_label = tk.Label(root, text="", fg="green", bg="#121212")
    result_label.pack()
    root.mainloop()
